document.addEventListener('DOMContentLoaded', function() {
    loadNotifications();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ header
    addNotificationBadge();
});

function loadNotifications() {
    const user = JSON.parse(localStorage.getItem('user'));
    if (!user) {
        window.location.href = 'index.html';
        return;
    }

    fetch(`http://5.129.203.13:5001/api/notifications/${user.id}`)
        .then(response => response.json())
        .then(notifications => {
            const container = document.getElementById('notifications-list');
            
            if (notifications.length === 0) {
                container.innerHTML = `
                    <div class="empty-notifications">
                        –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    </div>
                `;
                return;
            }

            container.innerHTML = notifications.map(notif => `
                <div class="notification-item ${notif.is_read ? '' : 'unread'}" 
                     data-id="${notif.id}">
                    ${notif.cover_url ? `
                        <img src="${notif.cover_url}" 
                             alt="${notif.book_title || '–ö–Ω–∏–≥–∞'}" 
                             class="notification-cover">
                    ` : ''}
                    <div class="notification-content">
                        <div class="notification-meta">
                            <span>${new Date(notif.created_at).toLocaleString()}</span>
                            ${notif.is_read ? '' : '<span class="new-badge">–ù–æ–≤–æ–µ</span>'}
                        </div>
                        <p class="notification-text">
                            ${getNotificationText(notif)}
                        </p>
                        <div class="notification-actions">
                            ${notif.type === 'exchange_request' ? `
                                <button class="btn-accept" onclick="acceptExchange(${notif.id})">
                                    –ü—Ä–∏–Ω—è—Ç—å
                                </button>
                                <button class="btn-reject" onclick="rejectExchange(${notif.id})">
                                    –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                                </button>
                            ` : ''}
                            ${notif.book_id ? `
                                <button class="notification-button primary" 
                                        onclick="location.href='book.html?id=${notif.book_id}'">
                                    –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–Ω–∏–≥—É
                                </button>
                            ` : ''}
                            <button class="notification-button secondary mark-as-read">
                                –ü–æ–º–µ—Ç–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º
                            </button>
                        </div>
                    </div>
                </div>
            `).join('');

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            document.querySelectorAll('.mark-as-read').forEach(button => {
                button.addEventListener('click', function(e) {
                    e.stopPropagation();
                    const notificationId = this.closest('.notification-item').dataset.id;
                    markAsRead(notificationId);
                });
            });
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
        });
}

function getNotificationText(notification) {
    switch (notification.type) {
        case 'exchange_request':
            return `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${notification.sender_login} —Ö–æ—á–µ—Ç –æ–±–º–µ–Ω—è—Ç—å—Å—è –∫–Ω–∏–≥–æ–π "${notification.book_title}"`;
        case 'exchange_accepted':
            return `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${notification.sender_login} –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–º–µ–Ω "${notification.book_title}"`;
        case 'exchange_rejected':
            return `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${notification.sender_login} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–º–µ–Ω "${notification.book_title}"`;
        case 'new_message':
            return `–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${notification.sender_login}`;
        default:
            return notification.message || '–£ –≤–∞—Å –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ';
    }
}

function markAsRead(notificationId) {
    fetch(`http://5.129.203.13:5001/api/notifications/${notificationId}/read`, {
        method: 'PUT'
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            const item = document.querySelector(`.notification-item[data-id="${notificationId}"]`);
            if (item) {
                item.classList.remove('unread');
                item.querySelector('.new-badge')?.remove();
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ —Å–∞–π–¥–±–∞—Ä–µ
            updateNotificationCounter();
        }
    });
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–µ–π–¥–∂–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ header
function addNotificationBadge() {
    const user = JSON.parse(localStorage.getItem('user'));
    if (!user) return;

    const notificationLink = document.createElement('a');
    notificationLink.href = 'notifications.html';
    notificationLink.className = 'notification-link';
    notificationLink.innerHTML = `
        <span class="notification-icon">üîî</span>
        <span class="notification-badge"></span>
    `;

    const headerControls = document.querySelector('.header-controls');
    if (headerControls) {
        headerControls.prepend(notificationLink);
        updateNotificationBadge();
    }
}

function updateNotificationCounter() {
    const user = JSON.parse(localStorage.getItem('user'));
    if (!user) return;

    fetch(`http://5.129.203.13:5001/api/notifications/${user.id}/unread-count`)
        .then(response => response.json())
        .then(data => {
            const counter = document.querySelector('.notification-counter');
            if (counter) {
                if (data.count > 0) {
                    counter.textContent = data.count > 9 ? '9+' : data.count;
                    counter.style.display = 'flex';
                } else {
                    counter.style.display = 'none';
                }
            }
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—á–µ—Ç—á–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
        });
}

// –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –ø–æ—Å–ª–µ –≤–∞–∂–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
document.addEventListener('DOMContentLoaded', function() {
    checkAuth();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    setInterval(updateNotificationCounter, 30000);
});
async function acceptExchange(notificationId) {
    try {
        const user = JSON.parse(localStorage.getItem('user'));
        if (!user) {
            showNotification('–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É', 'error');
            return;
        }

        // 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notificationResponse = await fetch(`http://5.129.203.13:5001/api/notifications/${notificationId}/full`);
        const notification = await notificationResponse.json();
        
        if (!notification) {
            throw new Error('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }

        // –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–±–º–µ–Ω –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ exchange_request_id
        if (notification.type === 'exchange_request' && !notification.exchange_request_id) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–º–µ–Ω');
        }

        // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –æ–±–º–µ–Ω–∞
        const response = await fetch('http://5.129.203.13:5001/api/exchange/accept', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                requestId: notification.exchange_request_id,
                userId: user.id,
                notificationId: notification.id // –î–æ–±–∞–≤–ª—è–µ–º ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            })
        });
        const data = await response.json();
        
        if (!response.ok) {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }

        showNotification('–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–º–µ–Ω –ø—Ä–∏–Ω—è—Ç!', 'success');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —Å—á–µ—Ç—á–∏–∫
        loadNotifications();
        updateNotificationCounter();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥, –µ—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–æ—Ñ–∏–ª—è
        if (typeof loadUserBooks === 'function') {
            loadUserBooks(user.id);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showNotification(`–û—à–∏–±–∫–∞: ${error.message}`, 'error');
    }
}
async function rejectExchange(notificationId) {
    try {
        const user = JSON.parse(localStorage.getItem('user'));
        if (!user) {
            showNotification('–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É', 'error');
            return;
        }

        // 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notificationResponse = await fetch(`http://5.129.203.13:5001/api/notifications/${notificationId}/full`);
        const notification = await notificationResponse.json();
        
        if (!notification || !notification.exchange_request_id) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–º–µ–Ω');
        }

        // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞
        const response = await fetch('http://5.129.203.13:5001/api/exchange/reject', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                requestId: notification.exchange_request_id,
                userId: user.id,
                notificationId: notification.id
            })
        });

        const data = await response.json();
        
        if (!response.ok) {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }

        showNotification('–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–º–µ–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω', 'info');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —Å—á–µ—Ç—á–∏–∫
        loadNotifications();
        updateNotificationCounter();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showNotification(`–û—à–∏–±–∫–∞: ${error.message}`, 'error');
    }
}
function renderNotification(notif) {
    const notificationElement = document.createElement('div');
    notificationElement.className = `notification-item ${notif.is_read ? '' : 'unread'}`;
    notificationElement.dataset.id = notif.id;
    
    let actions = '';
    if (notif.type === 'exchange_request') {
        actions = `
            <div class="notification-actions">
                <button class="btn-accept" onclick="acceptExchange(${notif.id})">
                    –ü—Ä–∏–Ω—è—Ç—å
                </button>
                <button class="btn-reject" onclick="rejectExchange(${notif.id})">
                    –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                </button>
            </div>
        `;
    }

    notificationElement.innerHTML = `
        ${notif.cover_url ? `
            <img src="${notif.cover_url}" 
                 alt="${notif.book_title || '–ö–Ω–∏–≥–∞'}" 
                 class="notification-cover">
        ` : ''}
        <div class="notification-content">
            <div class="notification-meta">
                <span>${new Date(notif.created_at).toLocaleString()}</span>
                ${notif.is_read ? '' : '<span class="new-badge">–ù–æ–≤–æ–µ</span>'}
            </div>
            <p class="notification-text">
                ${getNotificationText(notif)}
            </p>
            ${actions}
        </div>
    `;
    
    return notificationElement;
}