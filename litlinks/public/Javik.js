console.log('–°–∫—Ä–∏–ø—Ç Javik.js –∑–∞–≥—Ä—É–∂–µ–Ω!');
document.addEventListener('DOMContentLoaded', function () {
    const menuIcon = document.getElementById('menu-icon');
    const sidebar = document.getElementById('sidebar');
    const closeMenu = document.getElementById('close-menu');
    const openLogin = document.getElementById('open-login');
    const openRegister = document.getElementById('open-register');
    const closeLogin = document.getElementById('close-login');
    const closeRegister = document.getElementById('close-register');
    const loginModal = document.getElementById('login-modal');
    const registerModal = document.getElementById('register-modal');
    const loginForm = document.getElementById('login-form');
    const registerForm = document.getElementById('register-form');
    const authLink = document.getElementById('auth-link'); // –±—ã–ª–æ authLink
    const profileLink = document.querySelector('.profile-button'); // –±—ã–ª–æ profileLink
    const logoutIcon = document.querySelector('.logout-icon');
    const profileLogin = document.getElementById('profile-login');
    const profileEmail = document.getElementById('profile-email');
    const openSettings = document.getElementById('open-settings');
    const settingsSection = document.getElementById('settings');
    const editAboutMeButton = document.getElementById('edit-about-me');
    const aboutMeText = document.getElementById('about-me-text');
    const settingsForm = document.getElementById('settings-form');
    const chatToggle = document.querySelector('.chat-toggle');
    const chatContainer = document.querySelector('.chat-container');
    const closeChat = document.querySelector('.close-chat');
    const sendButton = document.getElementById('send-message');
    const messageInput = document.getElementById('message-input');
    const chatMessages = document.getElementById('chat-messages');
    
    window.addEventListener('storage', (event) => {
        console.log('–°–æ–±—ã—Ç–∏–µ storage —Å—Ä–∞–±–æ—Ç–∞–ª–æ:', event);
    });
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.addEventListener('DOMContentLoaded', function () {
        checkAuth();
    });
   // –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é checkAuth –≥–ª–æ–±–∞–ª—å–Ω–æ–π
function checkAuth() {
    const user = JSON.parse(localStorage.getItem('user'));
    const authLink = document.getElementById('authLink');
    const profileLink = document.getElementById('profileLink');
    const logoutIcon = document.querySelector('.logout-icon');

    if (user) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        if (authLink) authLink.classList.add('hidden'); // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–í–æ–π—Ç–∏" –∏ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
        if (profileLink) profileLink.classList.remove('hidden'); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" –∏ "–ó–∞–∫–ª–∞–¥–∫–∏"
        if (profileLogin) profileLogin.textContent = user.login;
        if (profileEmail) profileEmail.textContent = user.email;
    } else {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        if (authLink) authLink.classList.remove('hidden'); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–í–æ–π—Ç–∏" –∏ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
        if (profileLink) profileLink.classList.add('hidden'); // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" –∏ "–ó–∞–∫–ª–∞–¥–∫–∏"
        if (window.location.pathname.endsWith('profile.html') || window.location.pathname.endsWith('bookmarks.html')) {
            window.location.href = 'index.html';
        }
        if (openLogin && openRegister) {
            openLogin.addEventListener('click', function (e) {
                e.preventDefault();
                if (window.location.pathname.endsWith('bookmarks.html')) {
                    window.location.href = 'index.html';
                } else {
                    loginModal.classList.add('active');
                }
                
            });

            openRegister.addEventListener('click', function (e) {
                e.preventDefault();
                if (window.location.pathname.endsWith('bookmarks.html')) {
                    window.location.href = 'index.html';
                } else {
                    registerModal.classList.add('active');
                }
            });
        }
    }
}
const user = JSON.parse(localStorage.getItem('user'));
console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user);

document.addEventListener('DOMContentLoaded', function () {
    // –í—ã–∑–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    checkAuth();
    console.log('checkAuth –≤—ã–∑–≤–∞–Ω–∞');
});
    // –í—ã–∑–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    checkAuth();
    console.log('checkAuth –≤—ã–∑–≤–∞–Ω–∞');

    // –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é
    if (menuIcon && sidebar && closeMenu) {
        menuIcon.addEventListener('click', function () {
            sidebar.classList.add('active');
            document.querySelector('.chat-widget').classList.toggle('shift');
            document.querySelector('.chat-container').classList.toggle('shift');
        });
        
        closeMenu.addEventListener('click', function () {
            sidebar.classList.remove('active');
            document.querySelector('.chat-widget').classList.remove('shift');
            document.querySelector('.chat-container').classList.remove('shift');
        });
    }

    // –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    if (openLogin && openRegister && closeLogin && closeRegister) {
        openLogin.addEventListener('click', function (e) {
            e.preventDefault();
            loginModal.classList.add('active');
        });

        openRegister.addEventListener('click', function (e) {
            e.preventDefault();
            registerModal.classList.add('active');
        });

        closeLogin.addEventListener('click', function () {
            loginModal.classList.remove('active');
        });

        closeRegister.addEventListener('click', function () {
            registerModal.classList.remove('active');
        });
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    if (registerForm) {
        registerForm.addEventListener('submit', async function (e) {
            e.preventDefault();

            const login = document.getElementById('register-login').value;
            const email = document.getElementById('register-email').value;
            const password = document.getElementById('register-password').value;
            const confirmPassword = document.getElementById('register-confirm-password').value;

            if (password !== confirmPassword) {
                alert('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!');
                return;
            }

            try {
                const response = await fetch('http://localhost:5000/api/register', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ login, email, password }),
                });

                const data = await response.json();
                alert(data.message);
                if (response.ok) {
                    localStorage.setItem('user', JSON.stringify(data.user));
                    checkAuth(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    window.location.href = 'profile.html';
                }
            } catch (err) {
                alert('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ' + err.message);
            }
        });
    }

    // –í—Ö–æ–¥
    if (loginForm) {
        loginForm.addEventListener('submit', async function (e) {
            e.preventDefault();

            const login = document.getElementById('login-username').value;
            const password = document.getElementById('login-password').value;

            try {
                const response = await fetch('http://localhost:5000/api/login', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ login, password }),
                });

                const data = await response.json();
                alert(data.message);
                if (response.ok) {
                    localStorage.setItem('user', JSON.stringify(data.user));
                    checkAuth(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    window.location.href = 'profile.html';
                }
            } catch (err) {
                alert('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ' + err.message);
            }
        });
    }

    // –õ–æ–≥–∏–∫–∞ –≤—ã—Ö–æ–¥–∞
    logoutIcon.addEventListener('click', function () {
        console.log('–ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–∞—Ç–∞');
        localStorage.removeItem('user');
        sessionStorage.removeItem('user');
        checkAuth();
        window.location.href = 'index.html';
    });
    logoutIcon.addEventListener('click', function () {
        console.log('üî¥ –í—ã—Ö–æ–¥: —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        localStorage.removeItem('user');
        sessionStorage.removeItem('user');
    
        console.log('üîÑ –í—ã–∑—ã–≤–∞–µ–º checkAuth()');
        checkAuth();
    
        console.log('‚û°Ô∏è –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ index.html');
        window.location.href = 'index.html';
    });

    // –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if (openSettings && settingsSection) {
        openSettings.addEventListener('click', function (e) {
            e.preventDefault();
            settingsSection.classList.toggle('hidden');
        });
    }

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ
    if (editAboutMeButton && aboutMeText) {
        editAboutMeButton.addEventListener('click', function () {
            const newAboutMe = prompt('–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ:', aboutMeText.textContent);
            if (newAboutMe !== null) {
                aboutMeText.textContent = newAboutMe;
                const user = JSON.parse(localStorage.getItem('user'));
                user.aboutMe = newAboutMe;
                localStorage.setItem('user', JSON.stringify(user));
            }
        });
    }
});
// –æ—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –µ–≥–æ 
document.querySelectorAll('.chat-toggle').forEach(button => {
    button.addEventListener('click', () => {
        document.querySelector('.chat-container').classList.toggle('active');
    });
});

document.addEventListener('DOMContentLoaded', loadRecommendations);
async function loadRecommendations() {
    try {
        console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –∫–Ω–∏–≥...');
        const response = await fetch('http://localhost:5000/api/books');
        const books = await response.json();
        console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏:', books);

        const booksGrid = document.getElementById('books');
        if (booksGrid) {
            booksGrid.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥

            books.forEach(book => {
                console.log('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏:', book.title);
                const bookCard = document.createElement('div');
                bookCard.classList.add('book-card');

                // –û–±–ª–æ–∂–∫–∞ –∫–Ω–∏–≥–∏
                const bookCover = document.createElement('img');
                bookCover.classList.add('book-cover');
                bookCover.src = book.cover_url || 'default-cover.jpg'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –æ–±–ª–æ–∂–∫–∏ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
                bookCover.alt = book.title;

                // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–Ω–∏–≥–∏
                const bookTitle = document.createElement('h3');
                bookTitle.classList.add('book-title');
                bookTitle.textContent = book.title;

                // –ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏
                const bookAuthor = document.createElement('p');
                bookAuthor.classList.add('book-author');
                bookAuthor.textContent = `–ê–≤—Ç–æ—Ä: ${book.author}`;

                // –†–µ–π—Ç–∏–Ω–≥ –∫–Ω–∏–≥–∏
                const bookRating = document.createElement('p');
                bookRating.classList.add('book-rating');
                bookRating.textContent = `–†–µ–π—Ç–∏–Ω–≥: ${book.rating || '–ù–µ—Ç –æ—Ü–µ–Ω–∫–∏'}`;

                // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–∫–ª–∞–¥–∫–∏
                const addToBookmarksButton = document.createElement('button');
                addToBookmarksButton.textContent = 'üìö –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–ª–∞–¥–∫–∏';
                addToBookmarksButton.addEventListener('click', () => addToBookmarks(book.id));

                // –°–æ–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–∞—Ä—Ç–æ—á–∫—É
                bookCard.appendChild(bookCover);
                bookCard.appendChild(bookTitle);
                bookCard.appendChild(bookAuthor);
                bookCard.appendChild(bookRating);
                bookCard.appendChild(addToBookmarksButton);

                booksGrid.appendChild(bookCard);
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥:', error);
    }
}

async function fetchUserBookmarks(userId) {
    try {
        const response = await fetch(`http://localhost:5000/api/bookmarks/${userId}`);
        const bookmarks = await response.json();
        return bookmarks;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–ª–∞–¥–æ–∫:', error);
        return [];
    }
}
function filterBookmarksByGenre() {
    const genreFilter = document.getElementById('genre-filter');
    const selectedGenre = genreFilter.value;
    const bookmarksGrid = document.getElementById('bookmarks-grid');
    const bookmarkCards = bookmarksGrid.querySelectorAll('.bookmark-card');

    bookmarkCards.forEach(card => {
        const cardGenre = card.dataset.genre;
        if (selectedGenre === 'all' || cardGenre === selectedGenre) {
            card.style.display = 'block';
        } else {
            card.style.display = 'none';
        }
    });
}
// –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–ª–∞–¥–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', loadBookmarks);
async function removeFromBookmarks(bookId) {
    const user = JSON.parse(localStorage.getItem('user'));
    if (!user) {
        alert('–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∑–∞–∫–ª–∞–¥–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.');
        return;
    }

    try {
        fetch(`http://localhost:5000/api/bookmarks/${bookmarkId}`, {
            method: 'DELETE',
        });
        const data = await response.json();
        alert(data.message);
        loadBookmarks(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–ª–∞–¥–æ–∫
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∑–∞–∫–ª–∞–¥–æ–∫:', error);
    }
}

async function addToBookmarks(bookId) {
    const user = JSON.parse(localStorage.getItem('user'));
    if (!user) {
        alert('–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–∫–ª–∞–¥–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.');
        return;
    }

    try {
        const response = await fetch('http://localhost:5000/api/bookmarks', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ userId: user.id, bookId }), // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ userId –∏ bookId –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è
        });

        if (!response.ok) {
            const errorText = await response.text();
            console.error('–û—à–∏–±–∫–∞:', errorText);
            alert(`–û—à–∏–±–∫–∞: ${errorText}`);
            return;
        }

        const data = await response.json();
        alert(data.message);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∑–∞–∫–ª–∞–¥–∫–∏:', error);
    }
}

const user = JSON.parse(localStorage.getItem('user')); // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
if (user) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–≤–æ–π—Å—Ç–≤–æ bookmarks
    if (!user.bookmarks) {
        user.bookmarks = []; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º bookmarks –∫–∞–∫ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥—É –≤ –∑–∞–∫–ª–∞–¥–∫–∏
    user.bookmarks.push(book);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    localStorage.setItem('user', JSON.stringify(user));

    alert('–ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∑–∞–∫–ª–∞–¥–∫–∏!');
} else {
   // alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.');
}

console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user); // –õ–æ–≥–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
console.log('–ö–Ω–∏–≥–∞:', book); // –õ–æ–≥–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –∫–Ω–∏–≥–∏

if (user) {
    if (!user.bookmarks) {
        console.log('–°–≤–æ–π—Å—Ç–≤–æ bookmarks –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ');
        user.bookmarks = [];
    }

    user.bookmarks.push(book);
    localStorage.setItem('user', JSON.stringify(user));
    alert('–ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∑–∞–∫–ª–∞–¥–∫–∏!');
} else {
   // console.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
   // alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.');
}
    
// –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–ª–∞–¥–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', loadBookmarks);

async function loadBookmarks() {
    const user = JSON.parse(localStorage.getItem('user'));
    const bookmarksGrid = document.getElementById('bookmarks-grid');

    if (!bookmarksGrid || !user) {
        console.warn('‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–ª–∞–¥–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.');
        return;
    }

    try {
        const response = await fetch(`http://localhost:5000/api/bookmarks/${user.id}`);
        const bookmarks = await response.json();
        console.log('üìñ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–∞–∫–ª–∞–¥–∫–∏:', bookmarks);

        bookmarksGrid.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤

        bookmarks.forEach(bookmark => {
            console.log(`üìå –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥—É: ${bookmark.title}`);

            // –°–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –∑–∞–∫–ª–∞–¥–∫–∏
            const bookmarkCard = document.createElement('div');
            bookmarkCard.classList.add('bookmark-card');
            bookmarkCard.dataset.genre = bookmark.genre; // –î–æ–±–∞–≤–ª—è–µ–º –∂–∞–Ω—Ä –∫–Ω–∏–≥–∏ –≤ data-–∞—Ç—Ä–∏–±—É—Ç

            // –û–±–ª–æ–∂–∫–∞ –∫–Ω–∏–≥–∏
            const bookCover = document.createElement('img');
            bookCover.src = bookmark.cover_url || 'default-cover.jpg';
            bookCover.alt = bookmark.title;

            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–Ω–∏–≥–∏
            const bookTitle = document.createElement('h3');
            bookTitle.textContent = bookmark.title;

            // –ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏
            const bookAuthor = document.createElement('p');
            bookAuthor.textContent = `–ê–≤—Ç–æ—Ä: ${bookmark.author}`;

            // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–ª–∞–¥–∫–∏
            const removeButton = document.createElement('button');
            removeButton.textContent = '‚ùå –£–¥–∞–ª–∏—Ç—å';
            removeButton.classList.add('remove-button');
            removeButton.addEventListener('click', () => removeFromBookmarks(bookmark.id)); // –ü–µ—Ä–µ–¥–∞–µ–º bookmark.id, –∞ –Ω–µ book.id

            // –°–æ–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–∞—Ä—Ç–æ—á–∫—É
            bookmarkCard.appendChild(bookCover);
            bookmarkCard.appendChild(bookTitle);
            bookmarkCard.appendChild(bookAuthor);
            bookmarkCard.appendChild(removeButton);

            bookmarksGrid.appendChild(bookmarkCard);
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∂–∞–Ω—Ä—É
        const genreFilter = document.getElementById('genre-filter');
        genreFilter.addEventListener('change', filterBookmarksByGenre);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–ª–∞–¥–æ–∫:', error);
    }
}
async function removeFromBookmarks(bookId) {
    const user = JSON.parse(localStorage.getItem('user'));
    if (!user) {
        alert('–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∑–∞–∫–ª–∞–¥–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.');
        return;
    }

    try {
        const response = await fetch('http://localhost:5000/api/bookmarks', {
            method: 'DELETE',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ userId: user.id, bookId }), // –ü–µ—Ä–µ–¥–∞–µ–º userId –∏ bookId
        });

        if (!response.ok) {
            const errorText = await response.text();
            console.error('–û—à–∏–±–∫–∞:', errorText);
            alert(`–û—à–∏–±–∫–∞: ${errorText}`);
            return;
        }

        const data = await response.json();
        alert(data.message);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–ª–∞–¥–æ–∫
        loadBookmarks();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∑–∞–∫–ª–∞–¥–æ–∫:', error);
    }
}

document.addEventListener('DOMContentLoaded', function () {
    const avatarUpload = document.getElementById('avatar-upload');
    const changeAvatarButton = document.getElementById('change-avatar');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É"
    changeAvatarButton.addEventListener('click', function () {
        console.log('–ö–Ω–æ–ø–∫–∞ "–ò–∑–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É" –Ω–∞–∂–∞—Ç–∞'); // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        avatarUpload.click(); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    avatarUpload.addEventListener('change', async function (event) {
        const file = event.target.files[0];
        if (file) {
            console.log('–§–∞–π–ª –≤—ã–±—Ä–∞–Ω:', file.name); // –õ–æ–≥–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            const formData = new FormData();
            formData.append('avatar', file);

            try {
                const response = await fetch('/api/upload-avatar', {
                    method: 'POST',
                    body: formData,
                });

                const data = await response.json();
                if (response.ok) {
                    console.log('–ê–≤–∞—Ç–∞—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', data.avatarUrl); // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
                    document.getElementById('profile-avatar').src = data.avatarUrl; // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
                    alert('–ê–≤–∞—Ç–∞—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
                } else {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∫–∏:', data.error); // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∫–∏: ' + data.error);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∫–∏:', error); // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∫–∏');
            }
        } else {
            console.log('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'); // –õ–æ–≥–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω
        }
    });
});

document.addEventListener('DOMContentLoaded', function () {
    const editAboutMeButton = document.getElementById('edit-about-me');
    const aboutMeText = document.getElementById('about-me-text');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
    editAboutMeButton.addEventListener('click', async function () {
        const newAboutMe = prompt('–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ:', aboutMeText.textContent);
        if (newAboutMe !== null) {
            try {
                const user = JSON.parse(localStorage.getItem('user'));
                if (!user) {
                    //alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.');
                    return;
                }

                const response = await fetch('/api/update-about-me', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ userId: user.id, aboutMe: newAboutMe }),
                });

                const data = await response.json();
                if (response.ok) {
                    aboutMeText.textContent = newAboutMe; // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç "–û —Å–µ–±–µ"
                    alert('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–±–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
                } else {
                    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: ' + data.error);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error);
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
            }
        }
    });
});